#!/usr/bin/env python3

import sys
import os

from pathlib import PosixPath
from collections import namedtuple
from functools import partial
from itertools import combinations
from libtrish import get_meta, compare_meta


CodeBase = namedtuple('CodeBase', ['folder', 'canon'])
CodeBaseCmp = namedtuple('CodeBaseCmp', ['pair', 'score'])


def batch_display(res, top_count=10):
    res = sorted(res, key=lambda x: x.score, reverse=True)
    for i in range(min(top_count, len(res))):
        cur_res = res[i]
        dir_names = ', '.join(map(lambda x: x.folder.name, cur_res.pair))
        print(f'Rank: \t{i + 1}\t '
              f'Score: \t{cur_res.score}\t '
              f'Folders: \t{dir_names}')


def get_dir_lines(dir_path, glob):
    for file_path in dir_path.glob(glob):
        with file_path.open() as fp:
            yield from fp.readlines()


def get_dir_meta(*args, **kwargs):
    return get_meta(get_dir_lines(*args, **kwargs))


def pair_compare(pair):
    return compare_meta(*map(lambda x: x.canon, pair))


def batch_compare(path, glob):
    subdirs = lambda: filter(lambda e: e.is_dir(), path.iterdir())
    make_codebase = lambda subdir: CodeBase(subdir, get_dir_meta(subdir, glob))
    code_dirs = [make_codebase(subdir) for subdir in subdirs()]
    pair_it = combinations(code_dirs, 2)
    return [CodeBaseCmp(pair, pair_compare(pair)) for pair in pair_it]


if __name__ == '__main__':
    if len(sys.argv) not in (3, 4):
        print(f"Usage: {sys.argv[0]} FOLDER FILE_GLOB [DISP_COUNT]")
        exit(1)
    nb = 10 if len(sys.argv) < 4 else int(sys.argv[3])
    batch_display(batch_compare(PosixPath(sys.argv[1]), sys.argv[2]))
